/*
 * Copyright 2017 Splunk, Inc..
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.splunk.cloudfwd.impl.sim.errorgen.runtimeexceptions;

import com.splunk.cloudfwd.impl.EventBatchImpl;
import com.splunk.cloudfwd.impl.http.HttpPostable;
import com.splunk.cloudfwd.impl.sim.SimulatedHECEndpoints;
import java.util.Random;
import org.apache.http.HttpResponse;
import org.apache.http.concurrent.FutureCallback;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author ghendrey
 */
public class ExceptionsEndpoint extends SimulatedHECEndpoints {
  private static final Logger LOG = LoggerFactory.getLogger(ExceptionsEndpoint.class.getName());

  Random rand = new Random(0); //reproducible
  
  /**
   * 50/50 chance of producing a RuntimeException on postEvents.
   * @param events
   * @param httpCallback
   */
  @Override
  public void postEvents(HttpPostable events,
          FutureCallback<HttpResponse> httpCallback) {
    //we post an empty event for health check and preflight, so don't error on the empty event  
    if(((EventBatchImpl)events).getLength() > 0 && rand.nextBoolean()){
      LOG.trace("Generating ExceptionsEndpointRuntimeException for {}", (EventBatchImpl) events);
      throw new ExceptionsEndpointRuntimeException("Exception generated by ExceptionsEndpoint for test");
    }else{
      LOG.trace("Not generating exception for {}", (EventBatchImpl) events);
      super.postEvents(events, httpCallback);
    }
  }
  
  public static class ExceptionsEndpointRuntimeException extends RuntimeException{

    public ExceptionsEndpointRuntimeException(String message) {
      super(message);
    }
    
  }
  
}
